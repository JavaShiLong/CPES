package com.cpes.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.activiti.engine.RepositoryService;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.repository.ProcessDefinitionQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.cpes.beans.Page;
import com.cpes.common.BaseController;

@Controller
@RequestMapping("/process")
public class ProcessController extends BaseController{
	
	@Autowired
	RepositoryService repositoryService;
	
	
	@RequestMapping("/index")
	public String index(){
		return "process/index";
	}
	
	
	@ResponseBody
	@RequestMapping("/deleteProcess")
	public Object deleteProcess(String id){
		start();
		
		try {
			ProcessDefinitionQuery query = repositoryService.createProcessDefinitionQuery();
			
			ProcessDefinition pd = query.processDefinitionId(id).singleResult();
			
			repositoryService.deleteDeployment(pd.getId(), true);
			
			
			success(true);
		} catch (Exception e) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/deployProdDef")
	public Object deployProdDef(HttpServletRequest req){
		
	start();
		
		try {
			
			MultipartHttpServletRequest request = (MultipartHttpServletRequest)req;
			
			MultipartFile file = request.getFile("procDefFile");

			// 部署流程定义文件
			repositoryService.createDeployment()
			    .addInputStream(file.getOriginalFilename(), file.getInputStream())
			    .deploy();
			
			// 获取文件数据
			success(true);
		} catch( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/pageQuery")
	public Object pageQuery(Integer pageNo ,Integer pageSize){
		
		start();
		Page<Map<String, Object>> page = new Page<Map<String, Object>>();
		try {
			
			List<ProcessDefinition> datas = repositoryService.createProcessDefinitionQuery().listPage((pageNo-1)*pageSize , pageSize);
			
			// 使用Map对象来代替流程定义对象。
			List<Map<String, Object>> pdMaps = new ArrayList<Map<String, Object>>();
			
			for ( ProcessDefinition pd : datas ) {
				Map<String, Object> pdMap = new HashMap<String, Object>();
				pdMap.put("id", pd.getId());
				pdMap.put("key", pd.getKey());
				pdMap.put("name", pd.getName());
				pdMap.put("version", pd.getVersion());
				pdMaps.add(pdMap);
			}
			
			// 数量
			int totalSize = (int)repositoryService.createProcessDefinitionQuery().count();
			
			page.setTotalSize(totalSize);
			page.setDatas(pdMaps);
			
			param("page", page);
			success(true);
		} catch (Exception e) {
			e.printStackTrace();
			success(false);
		}
		
		
		return end();
	}

}
