package com.cpes.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cpes.beans.Datas;
import com.cpes.beans.Member;
import com.cpes.beans.Page;
import com.cpes.common.BaseController;
import com.cpes.service.MemberService;

@Controller
@RequestMapping("/member")
public class MemberController extends BaseController {

	@Autowired
	private MemberService memberService;
	
	@RequestMapping("/memberIndex")
	public String index() {
		return "member/index";
	}
	
	@RequestMapping("/add")
	public String add() {
		return "member/add";
	}
	
	
	@RequestMapping("/apply")
	public String apply( String step, Member member, HttpSession session, Model model ) {
		
		Member loginMember = (Member)session.getAttribute(Const.LOGIN_MEMBER);
		// 查询流程审批单
		Ticket t = memberService.queryTicketByMemberId(loginMember.getId());
		
		if ( t == null ) {
			// 创建流程审批单
			t = new Ticket();
			t.setMemberid(loginMember.getId());
			t.setAuthstatus("0");
			memberService.insertTicket(t);
		}
		// 根据流程审批单跳转到相应的申请步骤
		// 因为不是每一次申请都是从头操作，对于用户来讲，操作上就方便了很多
		if ( StringUtil.isEmpty(t.getProcessstep()) ) {
			return "member/cert";
		} else if ( "accttype".equals(t.getProcessstep()) ) {
			return "member/basicinfo";
		} else if ( "basicinfo".equals(t.getProcessstep()) ) {
			
			// 查询当前会员账户类型的资质数据
			List<Cert> certs = certService.queryCertsByMemberAccttype(loginMember.getAccttype());
			model.addAttribute("certs", certs);
			return "member/certupload";
		} else if ( "certupload".equals(t.getProcessstep()) ) {
			return "member/checkemail";
		} else if ( "checkemail".equals(t.getProcessstep()) ) {
			return "member/confirm";
		} else if ( "confirm".equals(t.getProcessstep()) ) {
			model.addAttribute("msg", "实名认证申请正在审批中，请等待...");
			return "member";
		}
		
//		if ( StringUtil.isEmpty(step) ) {
//			
//		} else if ( "accttype".equals(step) ) {
//			
//			// 更新会员的账户类型
//			
//			loginMember.setAccttype(member.getAccttype());
//			memberService.updateMemberAccttype(loginMember);
//			return "member/basicinfo";
//		}
		
		return "";
	}
	
	@ResponseBody
	@RequestMapping("/doApply")
	public Object doApply( String authcode, HttpSession session ) {
		start();
		
		try {
			Member loginMember = (Member)session.getAttribute(Const.LOGIN_MEMBER);
			// 获取流程审批单
			Ticket t = memberService.queryTicketByMemberId(loginMember.getId());
			
			// 判断认证码是否正确
			if ( authcode.equals(t.getAuthcode()) ) {
				// 让审批流程继续执行
				// 完成当前会员的验证任务
				TaskQuery query = taskService.createTaskQuery();
				List<Task> ts = query.taskAssignee(loginMember.getLoginacct()).list();
				for ( Task task : ts ) {
					taskService.complete(task.getId());
				}
				t.setProcessstep("confirm");
				memberService.updateTicketProcessStep(t);
				success(true);
			} else {
				error("认证码不正确，请重新输入");
				success(false);
			}
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/startProcess")
	public Object startProcess( Member member, HttpSession session ) {
		start();
		
		try {
			Member loginMember = (Member)session.getAttribute(Const.LOGIN_MEMBER);
			if ( !member.getEmail().equals(loginMember.getEmail()) ) {
				loginMember.setEmail(member.getEmail());
				memberService.updateMemberEmail(loginMember);
			}
			// 启动审批流程, 系统自动发送认证邮件
			// 获取实名认证的流程定义
			ProcessDefinitionQuery query =
				repositoryService.createProcessDefinitionQuery();
			ProcessDefinition pd = 
				query.processDefinitionKey("cpes").latestVersion().singleResult();
			
			Map<String, Object> varMap = new HashMap<String, Object>();
			varMap.put("useremail", loginMember.getEmail());
			
			String s = "asdlkjasdlkjsadsgjdslkhf32lkjkjfsalkjdfdslkj3";
			String authcode = "";
			for ( int i = 0; i < 4; i++ ) {
				Random r = new Random();
				int index = r.nextInt(s.length());
				authcode = authcode + s.charAt(index); 
			}
			
			varMap.put("authcode", authcode);
			varMap.put("userid", loginMember.getLoginacct());

			ProcessInstance pi = runtimeService.startProcessInstanceById(pd.getId(), varMap);
			Ticket t = memberService.queryTicketByMemberId(loginMember.getId());
			t.setProcessstep("checkemail");
			t.setPiid(pi.getId());
			t.setAuthcode(authcode);
			memberService.updateTicket(t);
			success(true);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/uploadCertFile")
	public Object uploadCertFile( HttpServletRequest req ) {
		start();
		
		try {
			HttpSession session = req.getSession();
			Member loginMember = (Member)session.getAttribute(Const.LOGIN_MEMBER);
			// 文件上传
			MultipartHttpServletRequest request = (MultipartHttpServletRequest)req;
			//request.getFile(name);
			//request.getFiles(name)
			Iterator<String> nameIter = request.getFileNames();
			while ( nameIter.hasNext() ) {
				String name = nameIter.next();
				Integer certid = Integer.parseInt(name.split("-")[1]);
				MultipartFile file = request.getFile(name);
				
				// 获取图形文件，保存文件
				String fileName = UUID.randomUUID().toString();
				String fn = file.getOriginalFilename(); // t.e.s.t.png
				fileName = fileName + fn.substring(fn.lastIndexOf("."));
				String dir = session.getServletContext().getRealPath("certimg");
				String path = dir + File.separator +fileName;
//				InputStream in = file.getInputStream();
//				FileOutputStream out = new FileOutputStream(new File(path));
//				int i = 0;
//				while ( (i = in.read()) != -1 ) {
//					out.write(i);
//				}
//				in.close();
//				out.close();
//				IOUtils.copy(in, out);
				file.transferTo(new File(path));
				
				// 保存会员资质数据
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("memberid", loginMember.getId());
				paramMap.put("certid", certid);
				paramMap.put("iconpath", fileName);
				memberService.insertMemberCert(paramMap);
			}
			Ticket t = memberService.queryTicketByMemberId(loginMember.getId());
			t.setProcessstep("certupload");
			memberService.updateTicketProcessStep(t);
			success(true);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/updateMemberBasicInfo")
	public Object updateMemberBasicInfo( Member member, HttpSession session ) {
		start();
		
		try {
			Member loginMember = (Member)session.getAttribute(Const.LOGIN_MEMBER);
			//member.setId(loginMember.getId());
			loginMember.setRealname(member.getRealname());
			loginMember.setCardno(member.getCardno());
			loginMember.setTel(member.getTel());
			memberService.updateMemberBasicInfo(loginMember);
			Ticket t = memberService.queryTicketByMemberId(loginMember.getId());
			t.setProcessstep("basicinfo");
			memberService.updateTicketProcessStep(t);
			success(true);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/updateMemberAccttype")
	public Object updateMemberAccttype( Member member, HttpSession session ) {
		start();
		
		try {
			Member loginMember = (Member)session.getAttribute(Const.LOGIN_MEMBER);
			loginMember.setAccttype(member.getAccttype());
			memberService.updateMemberAccttype(loginMember);
			Ticket t = memberService.queryTicketByMemberId(loginMember.getId());
			t.setProcessstep("accttype");
			memberService.updateTicketProcessStep(t);
			success(true);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@RequestMapping("/edit/{id}")
	public String edit( @PathVariable("id")Integer id, Model model ) {
		Member member = memberService.queryById(id);
		model.addAttribute("member", member);
		return "member/edit";
	}
	
	@ResponseBody
	@RequestMapping("/deleteMembers")
	public Object deleteMembers( Datas ds ) {
		start();
		
		try {
			int cnt = memberService.deleteMembers(ds);
			success(cnt == ds.getIds().size());
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/deleteMember")
	public Object deleteMember( Member member ) {
		start();
		
		try {
			int cnt = memberService.deleteMember(member);
			success(cnt == 1);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/updateMember")
	public Object updateMember( Member member ) {
		start();
		
		try {
			int cnt = memberService.updateMember(member);
			success(cnt == 1);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/insertMember")
	public Object insertMember( Member member ) {
		start();
		
		try {
			int cnt = memberService.insertMember(member);
			success(cnt == 1);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
	
	@ResponseBody
	@RequestMapping("/pageQuery")
	public Object pageQuery( Integer pageno, Integer pagesize, String querytext ) {
		start();
		
		try {
			
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("start", (pageno-1)*pagesize);
			paramMap.put("size", pagesize);
			paramMap.put("querytext", querytext);
			
			Page<Member> memberPage = memberService.queryMemberPage(paramMap);
			param("page", memberPage);
			success(true);
		} catch ( Exception e ) {
			e.printStackTrace();
			success(false);
		}
		
		return end();
	}
}
